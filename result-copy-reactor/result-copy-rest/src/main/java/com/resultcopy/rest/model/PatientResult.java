/*
 * Result Copy Reactor Web Server.
 * This server contains services like getting the patient details, child details, category details of result, copy the results from mother to the child.
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.resultcopy.rest.model;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import javax.validation.Valid;
import javax.validation.constraints.*;

/** Displays the patient details, child details, categories and result related to patient. */
@Schema(
    description =
        "Displays the patient details, child details, categories and result related to patient.")
@javax.annotation.Generated(
    value = "io.swagger.codegen.v3.generators.java.JavaJerseyServerCodegen",
    date = "2021-06-10T12:22:56.778Z[GMT]")
public class PatientResult {
  @JsonProperty("patient")
  private List<Patient> patient = new ArrayList<Patient>();

  @JsonProperty("child")
  private List<Child> child = new ArrayList<Child>();

  @JsonProperty("category")
  private List<Category> category = new ArrayList<Category>();

  @JsonProperty("isResultCopied")
  private Boolean isResultCopied = null;

  @JsonProperty("resultCopiedDateTime")
  private String resultCopiedDateTime = null;

  public PatientResult patient(List<Patient> patient) {
    this.patient = patient;
    return this;
  }

  public PatientResult addPatientItem(Patient patientItem) {
    this.patient.add(patientItem);
    return this;
  }

  /**
   * Information about the patient.
   *
   * @return patient
   */
  @JsonProperty("patient")
  @Schema(required = true, description = "Information about the patient.")
  @NotNull
  @Valid
  public List<Patient> getPatient() {
    return patient;
  }

  public void setPatient(List<Patient> patient) {
    this.patient = patient;
  }

  public PatientResult child(List<Child> child) {
    this.child = child;
    return this;
  }

  public PatientResult addChildItem(Child childItem) {
    this.child.add(childItem);
    return this;
  }

  /**
   * Information about the child.
   *
   * @return child
   */
  @JsonProperty("child")
  @Schema(required = true, description = "Information about the child.")
  @NotNull
  @Valid
  public List<Child> getChild() {
    return child;
  }

  public void setChild(List<Child> child) {
    this.child = child;
  }

  public PatientResult category(List<Category> category) {
    this.category = category;
    return this;
  }

  public PatientResult addCategoryItem(Category categoryItem) {
    this.category.add(categoryItem);
    return this;
  }

  /**
   * List of categories available as a part of patient reports.
   *
   * @return category
   */
  @JsonProperty("category")
  @Schema(
      required = true,
      description = "List of categories available as a part of patient reports.")
  @NotNull
  @Valid
  public List<Category> getCategory() {
    return category;
  }

  public void setCategory(List<Category> category) {
    this.category = category;
  }

  public PatientResult isResultCopied(Boolean isResultCopied) {
    this.isResultCopied = isResultCopied;
    return this;
  }

  /**
   * A boolean value that returns true/false based on whether the patient result is copied to baby
   * result previously.
   *
   * @return isResultCopied
   */
  @JsonProperty("isResultCopied")
  @Schema(
      example = "true",
      description =
          "A boolean value that returns true/false based on whether the patient result is copied to baby result previously.")
  public Boolean isIsResultCopied() {
    return isResultCopied;
  }

  public void setIsResultCopied(Boolean isResultCopied) {
    this.isResultCopied = isResultCopied;
  }

  public PatientResult resultCopiedDateTime(String resultCopiedDateTime) {
    this.resultCopiedDateTime = resultCopiedDateTime;
    return this;
  }

  /**
   * Date time when the result was copied from mother to baby in ISO
   * format,\&quot;YYYY-MM-DDTHH:MM:SSZ\&quot;.
   *
   * @return resultCopiedDateTime
   */
  @JsonProperty("resultCopiedDateTime")
  @Schema(
      example = "2011-10-05T14:48:00.000Z",
      description =
          "Date time when the result was copied from mother to baby in ISO format,\"YYYY-MM-DDTHH:MM:SSZ\".")
  public String getResultCopiedDateTime() {
    return resultCopiedDateTime;
  }

  public void setResultCopiedDateTime(String resultCopiedDateTime) {
    this.resultCopiedDateTime = resultCopiedDateTime;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientResult patientResult = (PatientResult) o;
    return Objects.equals(this.patient, patientResult.patient)
        && Objects.equals(this.child, patientResult.child)
        && Objects.equals(this.category, patientResult.category)
        && Objects.equals(this.isResultCopied, patientResult.isResultCopied)
        && Objects.equals(this.resultCopiedDateTime, patientResult.resultCopiedDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(patient, child, category, isResultCopied, resultCopiedDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientResult {\n");

    sb.append("    patient: ").append(toIndentedString(patient)).append("\n");
    sb.append("    child: ").append(toIndentedString(child)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    isResultCopied: ").append(toIndentedString(isResultCopied)).append("\n");
    sb.append("    resultCopiedDateTime: ")
        .append(toIndentedString(resultCopiedDateTime))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
